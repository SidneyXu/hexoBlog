<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Coffee Time]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://bookislife.com/"/>
  <updated>2015-08-10T00:11:34.000Z</updated>
  <id>http://bookislife.com/</id>
  
  <author>
    <name><![CDATA[Sidney Xu]]></name>
    <email><![CDATA[siriuseddy@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[4l4w - 04.String]]></title>
    <link href="http://bookislife.com/2015/08/10/4l4w-04-String/"/>
    <id>http://bookislife.com/2015/08/10/4l4w-04-String/</id>
    <published>2015-08-10T00:05:53.000Z</published>
    <updated>2015-08-10T00:11:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="String">String</h1><h2 id="Java">Java</h2><h3 id="声明字面量">声明字面量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Hello World"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="遍历字符">遍历字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行文本">多行文本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String text =</span><br><span class="line">        <span class="string">"\t1, 2, 3\n"</span> +</span><br><span class="line">                <span class="string">"\tone, two, three\n"</span> +</span><br><span class="line">                <span class="string">"\t\"x\", \"y\", \"z\""</span>;</span><br></pre></td></tr></table></figure>
<p>在 Java 中表示多行文本和特殊字符时需要使用对应的转义符，看起来很不直观</p>
<h3 id="模板_Template">模板 Template</h3><p>所谓的模板就是使用变量或表达式来代替字符串中通过特殊符号包裹的子串。</p>
<p>Java 并没有字符串模板，要想实现模板功能只有自己解析字符串，使用 <code>replace()</code> 等方法来进行模拟。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"Peter"</span>;</span><br><span class="line">String str = <span class="string">"name=$name, $&#123;name.length()&#125;"</span>;</span><br><span class="line">System.out.println(</span><br><span class="line">        str.replace(<span class="string">"$name"</span>, name)</span><br><span class="line">                .replace(<span class="string">"$&#123;name.length&#125;"</span>, <span class="string">""</span> + name.length()))；</span><br></pre></td></tr></table></figure>
<p>以上的例子中使用了变量 <code>name</code> 的值来代替字符串中的 <code>$name</code> 子串。</p>
<h3 id="常用方法">常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某一位置的字符</span></span><br><span class="line">System.out.println(s.charAt(<span class="number">2</span>));    <span class="comment">//  l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//截取子串</span></span><br><span class="line">System.out.println(s.substring(<span class="number">6</span>, <span class="number">9</span>));  <span class="comment">//  Wor</span></span><br></pre></td></tr></table></figure>
<h2 id="Groovy">Groovy</h2><h3 id="声明字面量-1">声明字面量</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> s = <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<h3 id="遍历字符-1">遍历字符</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> s) &#123;</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行文本-1">多行文本</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> text =</span><br><span class="line"><span class="string">"""    1, 2, 3</span><br><span class="line">one, two, three</span><br><span class="line">"x, "y", "z\"""</span><span class="string">"</span></span><br></pre></td></tr></table></figure>
<p>Groovy 中可以使用三个双引号表示原样输出，在三个双引号之间可以任意换行，使用特殊字符，可以看到这种设计比起 Java 来说要直观，简单很多。</p>
<p>但是需要注意的是如果要输出的字符串结尾也是双引号，则必须像以上例子一样在最后一个双引号前加上转义符 “\”，否则编译器会将此双引号和三个双引号看做是两组双引号而报编译错误。</p>
<h3 id="模板_Template-1">模板 Template</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> name = <span class="string">"Peter"</span></span><br><span class="line"><span class="keyword">def</span> str = <span class="string">"name=$&#123;name&#125;, $&#123;if (name.length() &gt; 10) 10 else name.length()&#125;"</span>;</span><br><span class="line">println(str)    <span class="comment">//  name=Peter, 5</span></span><br></pre></td></tr></table></figure>
<p>Groovy 中可以使用 <code>${}</code> 来实现字符串模板，大括号之间的字符会被解析为代码，代码的结果会被当做字符串来输出，看起来就像是使用 Javascript 的 <code>eval</code> 函数一样，比起 Java 来说方便许多，再也不用使用一堆加号连接字符串和变量了。</p>
<h3 id="GString">GString</h3><p>实际 Groovy 中可以使用单引号和双引号来表示字符串，大部分情况下这两者都是一样的用法。但是使用上述模板时必须使用双引号，因为使用引用符号 <code>${}</code> 的双引号字符串会被解析为 Groovy 内置的字符串类 GString。该类是 String 类的补充，拥有很多特殊的方法。而单引号字符串或不包含引用符号的字符串都会被解析为普通的 String 类。</p>
<h3 id="常用方法-1">常用方法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某一位置的字符</span></span><br><span class="line">println(s[<span class="number">2</span>])   <span class="comment">//  l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//截取字符串，"&lt;" 表示不包含</span></span><br><span class="line">println(s[<span class="number">6.</span><span class="number">.9</span>])    <span class="comment">//  Worl</span></span><br><span class="line">println(s[<span class="number">6.</span>.&lt;<span class="number">9</span>])   <span class="comment">//  Wor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回从字符串中减去某一部分的新字符串</span></span><br><span class="line">println(s - <span class="string">"l"</span> - <span class="string">"World"</span>)  <span class="comment">//  Helo</span></span><br></pre></td></tr></table></figure>
<h2 id="Scala">Scala</h2><h3 id="声明字面量-2">声明字面量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">s</span> =</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<h3 id="遍历字符-2">遍历字符</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (c &lt;- s) &#123;</span><br><span class="line">  println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行文本-2">多行文本</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">text</span> =</span></span><br><span class="line">  <span class="string">"""  1, 2, 3</span><br><span class="line">one, two, three</span><br><span class="line">"x, "y", "z"""</span><span class="string">"</span></span><br></pre></td></tr></table></figure>
<h3 id="模板_Template-2">模板 Template</h3><p>Scala 的字符串模板主要依赖于两种插值器（Interpolator）：s 插值器和 f 插值器</p>
<p>s 插值器</p>
<p>s 插值器主要用于进行简单的字符串替换，声明时直接使用字符 “s”连接字符串且当中不要有空格。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">name</span> =</span> <span class="string">"Peter"</span></span><br><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">str</span> =</span> s<span class="string">"name=$name, $&#123;if (name.length() &gt; 10) 10 else name.length&#125;"</span></span><br><span class="line">println(str)  <span class="comment">//  name=Peter, 5</span></span><br></pre></td></tr></table></figure>
<p>f 插值器</p>
<p>f 插值器主要用于进行格式化输出，类似 <code>String.format()</code> 的功能。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">salary</span> =</span> <span class="number">100.1</span></span><br><span class="line">println(f<span class="string">"$name%s has $salary%.5f"</span>) <span class="comment">//  Peter has 100.10000</span></span><br></pre></td></tr></table></figure>
<h3 id="常用方法-2">常用方法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(s.charAt(<span class="number">2</span>))  <span class="comment">//  l</span></span><br><span class="line">println(s.substring(<span class="number">6</span>,<span class="number">9</span>)) <span class="comment">//  Wor</span></span><br></pre></td></tr></table></figure>
<h2 id="Kotlin">Kotlin</h2><h3 id="声明字面量-3">声明字面量</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val s = &#34;Hello World&#34;</span><br></pre></td></tr></table></figure>
<h3 id="遍历字符-3">遍历字符</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (c in s) &#123;&#10;    println(c)&#10;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行文本-3">多行文本</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val text =&#10;&#34;&#34;&#34;     1, 2, 3&#10;    one, two, three&#10;    &#34;x, &#34;y&#34;, &#34;z&#34;&#34;&#34;&#34;</span><br></pre></td></tr></table></figure>
<h3 id="模板_Template-3">模板 Template</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val name = &#34;Peter&#34;;&#10;val str = &#34;name=$&#123;name&#125;, $&#123;if (name.length() &#62; 10) 10 else name.length()&#125;&#34;;&#10;println(str)    //  name=Peter, 5</span><br></pre></td></tr></table></figure>
<h3 id="常用方法-3">常用方法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(s[2])&#10;println(s.substring(5, 8))</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="String">String</h1><h2 id="Java">Java</h2><h3 id="声明字面量">声明字面量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre]]>
    </summary>
    
      <category term="Groovy" scheme="http://bookislife.com/tags/Groovy/"/>
    
      <category term="Java" scheme="http://bookislife.com/tags/Java/"/>
    
      <category term="Kotlin" scheme="http://bookislife.com/tags/Kotlin/"/>
    
      <category term="Scala" scheme="http://bookislife.com/tags/Scala/"/>
    
      <category term="4l4w" scheme="http://bookislife.com/categories/4l4w/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-11-类]]></title>
    <link href="http://bookislife.com/2015/04/26/Step-into-Groovy-11-%E7%B1%BB/"/>
    <id>http://bookislife.com/2015/04/26/Step-into-Groovy-11-类/</id>
    <published>2015-04-26T09:23:58.000Z</published>
    <updated>2015-04-26T15:41:50.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>定义类，默认构造方法，”.”，不可变类</p>
</blockquote>
<h2 id="类">类</h2><h3 id="定义类">定义类</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> &#123;</span></span><br><span class="line">  <span class="keyword">def</span> name</span><br><span class="line">  <span class="keyword">def</span> artist</span><br><span class="line">  <span class="keyword">def</span> genre</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> show() &#123;</span><br><span class="line">    <span class="string">"$&#123;name&#125;:$&#123;artist&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Grooy 中默认访问权限都是 public</p>
<h3 id="默认构造方法">默认构造方法</h3><p>当一个类被定义时，Groovy 会自动根据成员变量生成对应的默认构造方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> song = <span class="keyword">new</span> Song(<span class="string">artist:</span> <span class="string">"Peter"</span>, <span class="string">name:</span> <span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Setter_和_Getter">Setter 和 Getter</h3><p>Groovy 对象通过 <code>.</code> 调用属性实际调用的是对应的 setter 和 getter 方法<br>Groovy 自动对这些属性做了封装处理</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> &#123;</span></span><br><span class="line">  <span class="keyword">def</span> name</span><br><span class="line">  <span class="keyword">def</span> artist</span><br><span class="line">  <span class="keyword">def</span> genre</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> setArtist(p) &#123;</span><br><span class="line">    artist = p.toUpperCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> song = <span class="keyword">new</span> Song(<span class="string">artist:</span> <span class="string">"Peter"</span>, <span class="string">name:</span> <span class="string">"Hello World"</span>)</span><br><span class="line">song.artist = <span class="string">"Tim"</span></span><br><span class="line">println(song.artist)                <span class="comment">//TIM</span></span><br></pre></td></tr></table></figure>
<h3 id="不可变类">不可变类</h3><h4 id="特点">特点</h4><ul>
<li>不可变类使用 <code>@Immutable</code> 进行修饰</li>
<li>不可变类成员属性只能在构造对象时设置，之后不能进行更改</li>
<li>不可变类的成员属性定义时必须明确指明类型，不能使用 def 定义</li>
</ul>
<h4 id="使用">使用</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Immutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImmutSong</span> &#123;</span></span><br><span class="line">  String name</span><br><span class="line">  String artist</span><br><span class="line">  String genre</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> show()&#123;</span><br><span class="line">    artist</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ImmutSong song = <span class="keyword">new</span> ImmutSong(<span class="string">artist:</span> <span class="string">"Peter"</span>)</span><br><span class="line"><span class="comment">//        song.name="Hello"		error，不能进行修改</span></span><br><span class="line"><span class="comment">//        song.artist="Jack"	error，不能进行修改</span></span><br><span class="line">println song.show()     <span class="comment">//Peter</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A：</p>
<p>尽量使用不可变类</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>定义类，默认构造方法，”.”，不可变类</p>
</blockquote>
<h2 id="类">类</h2><h3 id="定义类">定义类</h3><figure class="highlight groovy"><tabl]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-10-映射]]></title>
    <link href="http://bookislife.com/2015/04/26/Step-into-Groovy-10-%E6%98%A0%E5%B0%84/"/>
    <id>http://bookislife.com/2015/04/26/Step-into-Groovy-10-映射/</id>
    <published>2015-04-26T09:22:38.000Z</published>
    <updated>2015-04-26T15:41:50.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>创建映射，空映射，访问元素</p>
</blockquote>
<h2 id="映射">映射</h2><h3 id="创建映射">创建映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def map = [name: <span class="string">"Peter"</span>, <span class="string">"age"</span>: <span class="number">12</span>, <span class="string">"national"</span>: <span class="string">"USA"</span>]</span><br><span class="line">println map.getClass()      <span class="comment">//class java.util.LinkedHashMap</span></span><br></pre></td></tr></table></figure>
<p>实际创建的是 LinkedHashMap对象，key 可以直接是名字或字符串</p>
<h3 id="空映射">空映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def emptyMap = [:]</span><br></pre></td></tr></table></figure>
<h3 id="添加元素">添加元素</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map.put(uid, 1000)    error</span></span><br><span class="line">map.put(<span class="string">"id"</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>注意此时与创建时不同，不能直接使用名字</p>
<p>或者</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.sex = <span class="string">"boy"</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map[height] = 100   error</span></span><br><span class="line">map[<span class="string">"height"</span>] = <span class="number">180</span></span><br></pre></td></tr></table></figure>
<p>此时也不能使用名字</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>创建映射，空映射，访问元素</p>
</blockquote>
<h2 id="映射">映射</h2><h3 id="创建映射">创建映射</h3><figure class="highlight java"><table><t]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-09-集合]]></title>
    <link href="http://bookislife.com/2015/04/26/Step-into-Groovy-09-%E9%9B%86%E5%90%88/"/>
    <id>http://bookislife.com/2015/04/26/Step-into-Groovy-09-集合/</id>
    <published>2015-04-26T09:21:07.000Z</published>
    <updated>2015-04-26T15:41:50.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>创建集合，空集合，添加（&lt;&lt;）及访问元素，+/-，展开操作符，size</p>
</blockquote>
<h2 id="集合">集合</h2><h3 id="创建集合">创建集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def list = [<span class="string">"Groovy"</span>, <span class="string">"Java"</span>, <span class="string">"Scala"</span>]</span><br><span class="line"><span class="keyword">assert</span> list <span class="keyword">instanceof</span> Collection</span><br><span class="line"><span class="keyword">assert</span> list <span class="keyword">instanceof</span> ArrayList</span><br></pre></td></tr></table></figure>
<h3 id="空集合">空集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def list = []</span><br></pre></td></tr></table></figure>
<h3 id="添加元素">添加元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="string">"Rust"</span>)</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list &lt;&lt; <span class="string">"Katlin"</span></span><br></pre></td></tr></table></figure>
<p>Groovy 中 <code>&lt;&lt;</code> 操作符被重载，以支持向集合中添加元素</p>
<p>或者</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.putAt(<span class="number">9</span>, <span class="string">"Python"</span>)</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def list = []</span><br><span class="line">list[<span class="number">10</span>] = <span class="string">"Ruby"</span></span><br></pre></td></tr></table></figure>
<h3 id="访问元素">访问元素</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list[<span class="number">2</span>]</span><br><span class="line">list.get(<span class="number">2</span>)</span><br><span class="line">list[-<span class="number">1</span>]</span><br><span class="line">list[-<span class="number">1.</span>.-<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>使用 “&lt;&lt;” 添加元素，使用 “[]” 访问元素</p>
</blockquote>
<h3 id="根据原列表返回新列表">根据原列表返回新列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def list = [<span class="string">"Groovy"</span>, <span class="string">"Java"</span>, <span class="string">"Scala"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此操作不会修改原有列表</span></span><br><span class="line">def nlist = list - [<span class="string">"Ruby"</span>, <span class="string">"Scala"</span>, <span class="string">"Java"</span>] + <span class="string">"Swift"</span></span><br></pre></td></tr></table></figure>
<h3 id="Spread_Operator">Spread Operator</h3><p>展开操作符为 <strong><code>*</code></strong>，用于对集合中的每一个元素进行操作后返回新列表</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">def numbers2 = numbers*.plus(<span class="number">10</span>)</span><br><span class="line">println(numbers)            <span class="comment">//[1, 2, 3, 4, 3, 4]</span></span><br><span class="line">println(numbers2)           <span class="comment">//[11, 12, 13, 14, 13, 14]</span></span><br></pre></td></tr></table></figure>
<h3 id="获取长度">获取长度</h3><p>Groovy 中 List, Map, String 等都统一用 size()来获取长度。</p>
<h3 id="常用操作">常用操作</h3><h4 id="根据列表创建字符串">根据列表创建字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">println numbers.join(<span class="string">","</span>)   <span class="comment">//1,2,3,4,3,4</span></span><br></pre></td></tr></table></figure>
<h4 id="获得集合中重复值的个数">获得集合中重复值的个数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">println numbers.count(<span class="number">3</span>)    <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h4 id="其它操作">其它操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line">println list.flatten()                  <span class="comment">//展开后返回新列表，-&gt;[1, 2, 3, 4, 5]</span></span><br><span class="line">println list.intersect([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])       <span class="comment">//返回新列表包含交集, -&gt;[3]</span></span><br><span class="line">println list.pop()                      <span class="comment">//[4, 5]</span></span><br><span class="line">println list.reverse()                  <span class="comment">//[3, 2, 1]</span></span><br><span class="line">println list.sort()                     <span class="comment">//返回反转的新列表, -&gt;[1, 2, 3]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>创建集合，空集合，添加（&lt;&lt;）及访问元素，+/-，展开操作符，size</p>
</blockquote>
<h2 id="集合">集合</h2><h3 id="创建集合">创建集合</h3><figure clas]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-07-异常]]></title>
    <link href="http://bookislife.com/2015/04/26/Step-into-Groovy-07-%E5%BC%82%E5%B8%B8/"/>
    <id>http://bookislife.com/2015/04/26/Step-into-Groovy-07-异常/</id>
    <published>2015-04-26T09:19:12.000Z</published>
    <updated>2015-04-26T15:41:50.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>异常</p>
</blockquote>
<h2 id="异常处理">异常处理</h2><p>Groovy 不区分检查异常和非检查异常，会忽略方法中的 throws 语句</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>异常</p>
</blockquote>
<h2 id="异常处理">异常处理</h2><p>Groovy 不区分检查异常和非检查异常，会忽略方法中的 throws 语句</p>
]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-06-流程控制与范围]]></title>
    <link href="http://bookislife.com/2015/04/19/Step-into-Groovy-06-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%8C%83%E5%9B%B4%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://bookislife.com/2015/04/19/Step-into-Groovy-06-流程控制与范围 - 副本/</id>
    <published>2015-04-19T01:43:02.000Z</published>
    <updated>2015-04-26T15:41:50.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>布尔环境，Switch（类型匹配，范围匹配），For，Range</p>
</blockquote>
<h2 id="流程控制与范围">流程控制与范围</h2><h3 id="流程控制">流程控制</h3><h4 id="If">If</h4><p>Groovy 中在 If 等类似的布尔环境中，表达式会被自动转为布尔值。规则为 <code>0</code>, <code>null</code> 及 <code>empty</code> 为 <strong>false</strong>，其余为 <strong>true</strong>。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line">  println <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  println <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> list = []</span><br><span class="line"><span class="keyword">if</span> (list) println <span class="literal">true</span> <span class="keyword">else</span> println <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>布尔环境中使用自动转换</p>
</blockquote>
<h4 id="Switch">Switch</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (var) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>: println <span class="number">0</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">11.</span><span class="number">.20</span>: println <span class="string">"11..20"</span>	<span class="comment">//左右都包含</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]: println <span class="string">'[1,2,3]'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">Float:</span> println <span class="string">'Float'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> &#123; it % <span class="number">3</span> == <span class="number">0</span> &#125;: println <span class="string">'Closure'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> ~<span class="string">'[0-9]&#123;3&#125;'</span>: println <span class="string">'Regex'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"><span class="label">  default:</span> println <span class="string">'Default'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">0</span>)     <span class="comment">//0</span></span><br><span class="line">test(<span class="number">20</span>)    <span class="comment">//11..20</span></span><br><span class="line">test(<span class="number">11</span>)    <span class="comment">//11..20</span></span><br><span class="line">test(<span class="number">30</span>)    <span class="comment">//Closure</span></span><br><span class="line">test(<span class="number">2</span>)     <span class="comment">//[1,2,3]</span></span><br><span class="line">test(<span class="number">1.2</span>f)  <span class="comment">//Float</span></span><br><span class="line">test(<span class="number">100</span>)   <span class="comment">//Regex</span></span><br><span class="line">test(<span class="number">1000</span>)  <span class="comment">//Default</span></span><br></pre></td></tr></table></figure>
<h4 id="For">For</h4><p>传统的 for 循环</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    println val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于 Range 的 for 循环</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.&lt; <span class="number">5</span>) &#123;</span><br><span class="line">    println val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>in 的目标可以是范围，映射或者 GString</p>
<h3 id="Range_范围">Range 范围</h3><p>Range 是特殊的 List</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def range = <span class="number">0.</span><span class="number">.4</span></span><br><span class="line">println range.class         <span class="comment">//class groovy.lang.IntRange</span></span><br><span class="line"><span class="keyword">assert</span> range <span class="keyword">instanceof</span> List</span><br></pre></td></tr></table></figure>
<p>Range 有以下形式</p>
<p>左右都包含</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span><span class="number">.3</span>			<span class="comment">//表示0,1,2,3</span></span><br></pre></td></tr></table></figure>
<p>左闭右开</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span>.&lt;<span class="number">3</span>			<span class="comment">//表示0,1,2</span></span><br></pre></td></tr></table></figure>
<p>除了数字，也可以使用字母</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a"</span>..<span class="string">"e"</span>		<span class="comment">//表示 a,b,c,d,e</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>简单类型时，使用 Range 代替 List</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>布尔环境，Switch（类型匹配，范围匹配），For，Range</p>
</blockquote>
<h2 id="流程控制与范围">流程控制与范围</h2><h3 id="流程控制">流程控制</h3><h4 id="If"]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-05-函数与闭包]]></title>
    <link href="http://bookislife.com/2015/04/19/Step-into-Groovy-05-%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <id>http://bookislife.com/2015/04/19/Step-into-Groovy-05-函数与闭包/</id>
    <published>2015-04-19T01:42:21.000Z</published>
    <updated>2015-04-19T01:43:01.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>定义方法，参数默认值，返回值，定义闭包，方法与闭包区别</p>
</blockquote>
<h2 id="方法_函数_闭包">方法 函数 闭包</h2><h3 id="方法">方法</h3><h4 id="定义方法">定义方法</h4><p>在 Groovy 中定义方法的参数时无需指定参数类型。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> say(name)&#123;</span><br><span class="line">  println name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指定参数的默认值</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> say(name, word = <span class="string">"Hello "</span>) &#123;</span><br><span class="line">  println word + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say(<span class="string">"Jack"</span>)                 <span class="comment">//Hello Jack</span></span><br><span class="line">say(<span class="string">"Mary"</span>, <span class="string">"Good bye "</span>)    <span class="comment">//Good bye Mary</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A：<br>使用参数默认值来代替方法重载</p>
</blockquote>
<h4 id="返回值">返回值</h4><p>Groovy 总是会自动返回方法最后一个表达式的值，无需手动调用 return 语句。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> add(x, y) &#123;</span><br><span class="line">  x += x</span><br><span class="line">  y += y</span><br><span class="line">  x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">16</span> == add(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>A：<br>只在必要时显示使用 return 语句</p>
</blockquote>
<h3 id="函数字面值">函数字面值</h3><h4 id="概述">概述</h4><ul>
<li>函数字面值的定义和使用都近似方法，但是其可以被赋值给变量，从而可以被传递和执行</li>
<li>定义了一个函数字面值又被称为定义了一个闭包，从形式上看是由<code>{}</code>包围的代码块，是一个可执行的代码块</li>
<li>闭包实际是一个匿名内部类的对象</li>
<li>闭包可以嵌套，方法不能嵌套</li>
</ul>
<h4 id="定义一个闭包">定义一个闭包</h4><p>与方法不同，没有表示参数的括号，而多了等号</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> excite = &#123; word -&gt;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"$&#123;word&#125;!!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用默认参数">使用默认参数</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> d = &#123;name, address = <span class="string">'Shanghai'</span>-&gt;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用闭包">调用闭包</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">"Groovy!!"</span> == excite(<span class="string">"Groovy"</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">"Java!!"</span> == excite.call(<span class="string">"Java"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="it">it</h4><p><code>it</code> 表示闭包内部的单个参数，所以定义闭包时如果只有单个参数，可以按如下方式简写</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> learn = &#123;</span><br><span class="line">  it</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="string">"Groovy"</span> == learn(<span class="string">"Groovy"</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>使用 it 来表示单个参数</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>定义方法，参数默认值，返回值，定义闭包，方法与闭包区别</p>
</blockquote>
<h2 id="方法_函数_闭包">方法 函数 闭包</h2><h3 id="方法">方法</h3><h4 id="定义方法">定义方法]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-04-操作符]]></title>
    <link href="http://bookislife.com/2015/04/19/Step-into-Groovy-04-%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://bookislife.com/2015/04/19/Step-into-Groovy-04-操作符/</id>
    <published>2015-04-19T01:40:21.000Z</published>
    <updated>2015-04-19T01:40:39.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>相等，安全引用操作符，猫王操作符</p>
</blockquote>
<h2 id="操作符">操作符</h2><h3 id="概述">概述</h3><p>Groovy 中的操作符实际都是方法，且支持操作符的重载</p>
<h3 id="相等">相等</h3><p>遵循最小意外原则，Groovy 中 <code>==</code> 等于 Java 中的 <code>equals()</code> 方法。要检查是否对象相等，需使用 <code>is()</code> 函数</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">2</span>)</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">2</span>)</span><br><span class="line">Integer z</span><br><span class="line"></span><br><span class="line">println x == y      <span class="comment">//true</span></span><br><span class="line">println x.is(y)     <span class="comment">//false</span></span><br><span class="line">println z == <span class="literal">null</span>   <span class="comment">//true</span></span><br><span class="line">println z.is(<span class="literal">null</span>)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="重载的操作符">重载的操作符</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">4</span> + <span class="number">3</span> == <span class="number">7</span>    			<span class="comment">//4.plus(3)</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span> - <span class="number">3</span> == <span class="number">1</span>    			<span class="comment">//4.minus(3)</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span>**<span class="number">3</span> == <span class="number">64</span>    			<span class="comment">//4.power(3)</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span> <span class="regexp">/ 3 == 1.3333333333	 /</span>/<span class="number">4.</span>div(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">4.</span>intdiv(<span class="number">3</span>) == <span class="number">1</span>			<span class="comment">//整除</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span> &gt; <span class="number">3</span>   					<span class="comment">//4.compareTo(3)</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span> &lt;=&gt; <span class="number">3</span> == <span class="number">1</span>    			<span class="comment">//4.compareTo(3)</span></span><br></pre></td></tr></table></figure>
<h3 id="安全引用操作符">安全引用操作符</h3><p><code>?.</code> 表示如果对象为空，则什么都不做</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//old</span></span><br><span class="line">List&lt;Person&gt; people = [<span class="literal">null</span>, <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">"Jack"</span>)]</span><br><span class="line"><span class="keyword">for</span> (Person <span class="string">person :</span> people) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">      println person.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//Jack</span></span><br><span class="line">println()</span><br><span class="line"></span><br><span class="line"><span class="comment">//new</span></span><br><span class="line"><span class="keyword">for</span> (Person <span class="string">person :</span> people) &#123;</span><br><span class="line">  println person?.name</span><br><span class="line">&#125;</span><br><span class="line">//output	 仍然会被输出，仅表示为 null 时不调用.name</span><br><span class="line">//null</span><br><span class="line">//Jack</span><br></pre></td></tr></table></figure>
<h3 id="猫王操作符">猫王操作符</h3><p>Groovy 会将三元操作符的操作数强制转为 boolean<br><code>?:</code> 是三元操作符的简写方式</p>
<p>Java 方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String agentStatus = <span class="string">"Active"</span></span><br><span class="line">String status = agentStatus != <span class="keyword">null</span> ? agentStatus : <span class="string">"Inactive"</span></span><br><span class="line"><span class="keyword">assert</span> status == <span class="string">"Active"</span></span><br></pre></td></tr></table></figure>
<p>Groovy 方式</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">status = agentStatus ? agentStatus : <span class="string">"Inactive"</span></span><br><span class="line"><span class="keyword">assert</span> status == <span class="string">"Active"</span></span><br></pre></td></tr></table></figure>
<p>简写</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">status = agentStatus ?: <span class="string">"Inactive"</span></span><br><span class="line"><span class="keyword">assert</span> status == <span class="string">"Active"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>使用猫王操作符替代三元操作符</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>相等，安全引用操作符，猫王操作符</p>
</blockquote>
<h2 id="操作符">操作符</h2><h3 id="概述">概述</h3><p>Groovy 中的操作符实际都是方法，且支持操作符的重载</p>
<h3]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-03-脚本]]></title>
    <link href="http://bookislife.com/2015/04/19/Step-into-Groovy-03-%E8%84%9A%E6%9C%AC/"/>
    <id>http://bookislife.com/2015/04/19/Step-into-Groovy-03-脚本/</id>
    <published>2015-04-19T01:24:08.000Z</published>
    <updated>2015-04-26T15:41:50.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>运行脚本，绑定域</p>
</blockquote>
<h2 id="脚本">脚本</h2><h3 id="运行脚本">运行脚本</h3><p>从命令行中运行指定脚本</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovy example.groovy</span><br></pre></td></tr></table></figure>
<p>在其它程序中运行指定脚本</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有一脚本文件 example.groovy</span></span><br><span class="line">def s = <span class="keyword">new</span> example()</span><br><span class="line">s.run()</span><br></pre></td></tr></table></figure>
<p>也可以通过该脚本对象直接运行脚本内的函数</p>
<h3 id="绑定变量">绑定变量</h3><p>通过 new 建立的脚本对象可以绑定指定的值到该脚本的绑定域中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file: example.groovy</span></span><br><span class="line"><span class="comment">//绑定域</span></span><br><span class="line">helloworld = <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">  println(helloworld)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//file: other.groovy</span></span><br><span class="line">def s = <span class="keyword">new</span> example()</span><br><span class="line">s.binding.goodbye = <span class="string">"good bye"</span>	<span class="comment">//绑定不存在的变量不会报错</span></span><br><span class="line">s.binding.helloworld = <span class="string">"hello groovy"</span></span><br><span class="line">s.hello()	<span class="comment">//hello groovy</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>运行脚本，绑定域</p>
</blockquote>
<h2 id="脚本">脚本</h2><h3 id="运行脚本">运行脚本</h3><p>从命令行中运行指定脚本</p>
<figure class="highlight j]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step-into-Groovy-02-数据类型与作用域]]></title>
    <link href="http://bookislife.com/2015/04/19/Step-into-Groovy-02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://bookislife.com/2015/04/19/Step-into-Groovy-02-数据类型与作用域/</id>
    <published>2015-04-19T01:16:29.000Z</published>
    <updated>2015-04-19T01:34:28.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>times()，upto()，downto()，step()，GString，类型转换，类型推断，作用域</p>
</blockquote>
<h2 id="数据类型与作用域">数据类型与作用域</h2><h3 id="一切皆对象">一切皆对象</h3><p>Groovy 中一切皆对象，这意味着 Groovy 中不存在基本类型。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="typename">int</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> j = <span class="number">2</span></span><br><span class="line">println i.<span class="keyword">class</span>	<span class="comment">//class java.lang.Integer</span></span><br><span class="line">println j.<span class="keyword">class</span>	<span class="comment">//class java.lang.Integer</span></span><br></pre></td></tr></table></figure>
<p>可以看到在 Groovy 中基本类型实际是通过包装类实现的。</p>
<h3 id="数据类型">数据类型</h3><h4 id="数字类型">数字类型</h4><p>常用方法</p>
<ul>
<li><code>n.times{}</code>    <em>执行 n 次</em></li>
<li><code>n.upto(m){}</code>    <em>执行 m-n+1 次</em></li>
<li><code>n.downto(m){}</code>    <em>执行 n-m+1 次</em></li>
<li><code>n.step(a,b){}</code>    <em>执行 (a-n)b 次，即从 n 开始，每次步长 b，直到等于 a</em></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> store = <span class="string">""</span></span><br><span class="line"><span class="number">10.</span>times &#123; store += <span class="string">"x"</span> &#125;</span><br><span class="line"><span class="keyword">assert</span> store == <span class="string">"xxxxxxxxxx"</span></span><br><span class="line"></span><br><span class="line">store = <span class="string">""</span></span><br><span class="line"><span class="number">1.</span>upto(<span class="number">5</span>) &#123; n -&gt; store += n &#125;</span><br><span class="line"><span class="keyword">assert</span> store == <span class="string">"12345"</span></span><br><span class="line"></span><br><span class="line">store = <span class="string">""</span></span><br><span class="line"><span class="number">2.</span>downto(-<span class="number">2</span>) &#123; n -&gt; store += n + <span class="string">""</span> &#125;</span><br><span class="line"><span class="keyword">assert</span> store == <span class="string">"210-1-2"</span></span><br><span class="line"></span><br><span class="line">store = <span class="string">""</span></span><br><span class="line"><span class="number">0.</span>step(<span class="number">0.5</span>, <span class="number">0.1</span>) &#123; n -&gt; store += n + <span class="string">","</span> &#125;</span><br><span class="line"><span class="keyword">assert</span> store == <span class="string">"0,0.1,0.2,0.3,0.4,"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>可以用来代替 for 循环</p>
</blockquote>
<h4 id="字符串">字符串</h4><h5 id="概述">概述</h5><p>Groovy 中可以使用 Java 的 String 和 Groovy 的 GString 表示字符串。</p>
<p>原则</p>
<ul>
<li>当没有明确指明类型时，字符串都会被推断为 String 类型</li>
<li>String 可以用单引号或双引号声明，但是 GString 只能以双引号声明</li>
<li>只有 GString 支持使用引用符 <code>${}</code></li>
<li>三引号 <code>&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;</code> 可以定义跨行的字符串，即按格式原样输出</li>
<li>双引号内部可以使用单引号，单引号内部可以使用双引号</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> x = <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> singleQuote = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">def</span> doubleQuotes = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">def</span> singleQuote2 = <span class="string">'abc$&#123;x&#125;'</span></span><br><span class="line"><span class="keyword">def</span> doubleQuotes2 = <span class="string">"abc$&#123;x&#125;"</span></span><br><span class="line">println singleQuote.<span class="keyword">class</span>   <span class="comment">//class java.lang.String</span></span><br><span class="line">println doubleQuotes.<span class="keyword">class</span>  <span class="comment">//class java.lang.String</span></span><br><span class="line">println singleQuote2.<span class="keyword">class</span>  <span class="comment">//class java.lang.String</span></span><br><span class="line">println doubleQuotes2.<span class="keyword">class</span> <span class="comment">//class org.codehaus.groovy.runtime.GStringImpl</span></span><br><span class="line"></span><br><span class="line">println singleQuote2        <span class="comment">//abc$&#123;x&#125;</span></span><br><span class="line">println doubleQuotes2       <span class="comment">//abc2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>A:</p>
<p>尽量使用 GString 进行字符串拼接</p>
</blockquote>
<h5 id="常用方法">常用方法</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> str = <span class="string">'Groovy&amp;Grails&amp;lxt008'</span></span><br><span class="line">println str[<span class="number">4</span>]                  <span class="comment">//v</span></span><br><span class="line">println str[-<span class="number">1</span>]                 <span class="comment">//8</span></span><br><span class="line">println str[<span class="number">1.</span><span class="number">.2</span>]               <span class="comment">//ro</span></span><br><span class="line">println str[<span class="number">1.</span>.&lt;<span class="number">3</span>]              <span class="comment">//ro</span></span><br><span class="line">println str[<span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>]            <span class="comment">//vr&amp;</span></span><br><span class="line">println <span class="string">'a'</span> == <span class="string">'a'</span>              <span class="comment">//true</span></span><br><span class="line">println <span class="string">'a'</span> &lt;=&gt; <span class="string">'a'</span>             <span class="comment">//0</span></span><br><span class="line">println <span class="string">'a'</span>.compareTo(<span class="string">'a'</span>)      <span class="comment">//0</span></span><br><span class="line">println <span class="string">'a'</span> - <span class="string">'a'</span>               <span class="comment">//</span></span><br><span class="line">println <span class="string">'a'</span> + <span class="string">'a'</span>               <span class="comment">//aa</span></span><br><span class="line">println <span class="string">'a'</span> * <span class="number">3</span>                 <span class="comment">//aaa</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">'Groovy'</span></span><br><span class="line">println str.center(<span class="number">11</span>)          <span class="comment">//  Groovy</span></span><br><span class="line">println str.center(<span class="number">2</span>)           <span class="comment">//Groovy</span></span><br><span class="line">println str.center(<span class="number">11</span>, <span class="string">'='</span>)     <span class="comment">//==Groovy===</span></span><br><span class="line">println str.count(<span class="string">'o'</span>)          <span class="comment">//2</span></span><br><span class="line">println str.leftShift(<span class="string">' world'</span>) <span class="comment">//Groovy world</span></span><br><span class="line">println str &lt;&lt; <span class="string">' world'</span>         <span class="comment">//Groovy world</span></span><br><span class="line">println str.minus(<span class="string">'vy'</span>)         <span class="comment">//Groo</span></span><br><span class="line">println str - <span class="string">'vy'</span>              <span class="comment">//Groo</span></span><br><span class="line"></span><br><span class="line">println str.next()              <span class="comment">//Groovz</span></span><br><span class="line">println str.previous()          <span class="comment">//Groovx</span></span><br><span class="line"></span><br><span class="line">println str.padLeft(<span class="number">4</span>)          <span class="comment">//Groovy</span></span><br><span class="line">println str.padLeft(<span class="number">11</span>)         <span class="comment">//     Groovy</span></span><br><span class="line">println str.padLeft(<span class="number">11</span>, <span class="string">"="</span>)    <span class="comment">//=====Groovy</span></span><br><span class="line"></span><br><span class="line">println str.replaceAll(<span class="string">'[a-z]'</span>) &#123; ch -&gt; ch.toUpperCase() &#125;  <span class="comment">//GROOVY</span></span><br><span class="line">println <span class="string">'123'</span>.toDouble()                                    <span class="comment">//123.0</span></span><br><span class="line">println <span class="string">'123'</span>.toList()                                      <span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tokenize 返回 List，split 返回数组</span></span><br><span class="line">str = <span class="string">"Groovy Grails&amp;lxt"</span></span><br><span class="line">println str.tokenize()                                      <span class="comment">//[Groovy, Grails&amp;lxt]</span></span><br><span class="line">println str.tokenize(<span class="string">'&amp;'</span>)                                   <span class="comment">//[Groovy Grails, lxt]</span></span><br><span class="line">println str.tokenize().getClass().getName()                 <span class="comment">//java.util.ArrayList</span></span><br><span class="line">println str.tokenize(<span class="string">"t"</span>).getClass().getName()              <span class="comment">//java.util.ArrayList</span></span><br><span class="line">println str.split(<span class="string">"t"</span>).getClass().getName()                 <span class="comment">//[Ljava.lang.String;</span></span><br></pre></td></tr></table></figure>
<p>A：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="function"><span class="title">toDouble</span><span class="params">()</span></span>等进行类型转换</span><br></pre></td></tr></table></figure></p>
<h3 id="类型推断">类型推断</h3><p>在 Java 中以下代码代表一个 String</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String value = <span class="string">"Hello World"</span>;</span><br></pre></td></tr></table></figure>
<p>但是实际上从 “=” 右边就可以推断出这是一个 String，左边的类型声明有点多此一举。所以 Groovy 允许使用 def 定义变量，具体类型由 Groovy 根据右边的值进行推断。如果 Groovy 无法推断具体的类型则会把它当做是 Object。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> value = <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>可以通过调用 <code>.class</code> 来查看变量的具体类型</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println value.<span class="keyword">class</span></span><br></pre></td></tr></table></figure>
<p>因为 Groovy 是无类型的，所以方法中的参数也可以 <strong>省略 def 关键字</strong></p>
<blockquote>
<p>A:</p>
<p>除非必要，使用 def 定义变量</p>
</blockquote>
<h3 id="动态类型与静态类型">动态类型与静态类型</h3><p>Groovy 支持动态类型和静态类型</p>
<p>动态类型</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> dynamicDate = <span class="keyword">new</span> Date()</span><br></pre></td></tr></table></figure>
<p>静态类型</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date staticDate = <span class="keyword">new</span> Date()</span><br></pre></td></tr></table></figure>
<p>如果声明了静态类型，就不能再改变该变量的类型</p>
<h2 id="作用域">作用域</h2><h3 id="Groovy_类">Groovy 类</h3><p>Groovy 类作用域同 Java</p>
<h3 id="Groovy_脚本">Groovy 脚本</h3><p>绑定域：脚本内的全局作用域，相当于该脚本对象的成员变量。如果没有定义过变量(可以直接使用或仅仅初始化但未声明)，其作用域即是绑定域。<br>本地域：脚本内的代码块。如果是定义过的变量，其作用域就是本地域。</p>
<p>脚本中声明的方法访问不了本地域</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String hello = <span class="string">"hello"</span>	<span class="comment">//定义变量，作用域是本地域</span></span><br><span class="line"><span class="keyword">def</span> world = <span class="string">"world"</span>		<span class="comment">//定义变量，作用域是本地域</span></span><br><span class="line"></span><br><span class="line">helloworld = <span class="string">"hello world"</span>	<span class="comment">//全局变量，作用域是绑定域</span></span><br><span class="line"></span><br><span class="line"><span class="typename">void</span> check() &#123;</span><br><span class="line">	println hello</span><br><span class="line">    println world</span><br><span class="line">    println helloworld</span><br><span class="line">&#125;</span><br><span class="line">check()</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>times()，upto()，downto()，step()，GString，类型转换，类型推断，作用域</p>
</blockquote>
<h2 id="数据类型与作用域">数据类型与作用域</h2><h3 id="一切皆对]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into Groovy - 01 - 安装与运行]]></title>
    <link href="http://bookislife.com/2015/04/16/Step-into-Groovy-01-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C/"/>
    <id>http://bookislife.com/2015/04/16/Step-into-Groovy-01-安装与运行/</id>
    <published>2015-04-16T00:02:48.000Z</published>
    <updated>2015-04-16T16:05:10.000Z</updated>
    <content type="html"><![CDATA[<p>摘要</p>
<blockquote>
<p>goovyConsole</p>
</blockquote>
<h2 id="Begin">Begin</h2><h3 id="简介">简介</h3><ul>
<li>Groovy 是一门动态语言。</li>
<li>Groovy 语法和 Java 很相似，可以在代码中与 Java 互相调用，Groovy 实际上就是 Java。</li>
</ul>
<h3 id="与Java的区别">与Java的区别</h3><ul>
<li>动态类型</li>
<li>脚本语言</li>
<li>允许省略每行的分号</li>
<li>默认限定符为 public</li>
<li>可以省略方法参数的括号</li>
<li>不必写 return 语句，会自动返回最后一句表达式的结果</li>
</ul>
<h3 id="安装Groovy">安装Groovy</h3><p>Mac环境下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install groovy</span><br></pre></td></tr></table></figure>
<p>Windows环境下</p>
<ol>
<li>设置系统变量 <code>GROOVY_HOME=D:\Groovy-2.3.8</code></li>
<li>PATH中添加 <code>%GROOVY_HOME%\bin</code></li>
</ol>
<h3 id="第一个_Groovy_程序">第一个 Groovy 程序</h3><h4 id="编译_Groovy_脚本">编译 Groovy 脚本</h4><p>Groovy 脚本是解释型的，但是也可以进行编译型的。类似 Java，编译使用的是 groovyc 命令。groovy 和 groovyc 就类似 java 的 java 命令和 javac 命令。<br>编译后会产生标准的 java 的 *.class 文件，也可以通过 Java 命令进行运行。</p>
<h4 id="运行_Groovy_脚本">运行 Groovy 脚本</h4><h5 id="在命令行中运行Groovy脚本">在命令行中运行Groovy脚本</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\blog\groovy&#62;groovy -e &#34;println &#39;hello world&#39;&#34;&#10;hello world</span><br></pre></td></tr></table></figure>
<p>-e 指定脚本内容</p>
<h5 id="运行本地Groovy脚本文件">运行本地Groovy脚本文件</h5><p>新建一文件，命名为hello.groovy，添加内容为<code>println &quot;Hello World&quot;</code><br>定位到该文件根目录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\blog\groovy&#62;groovy hello.groovy&#10;Hello World</span><br></pre></td></tr></table></figure>
<h5 id="在GUI界面中运行Groovy脚本">在GUI界面中运行Groovy脚本</h5><p>在终端中输入<code>groovyConsole</code>会打开一个Groovy的GUI界面。整个界面分上下两块，上面是可输入的代码输入区，下半部会输出结果。</p>
<p>在输入区域输入<code>println &quot;Hello World&quot;</code>，然后选择Scipt-Run可以看到同样的结果</p>
<h4 id="编写_Groovy_类">编写 Groovy 类</h4><p>建立文件”HelloWorld.groovy”，添加内容</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="typename">void</span> main(args) &#123;</span><br><span class="line">        println(<span class="string">"Hello World"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行<code>groovy HelloWorld</code></p>
<p>这里可以看到 groovy 类和 java 类非常相似，实际上 Groovy 就是 Java</p>
<p>再建一个文件”HelloWorld2.groovy”</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld2</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="typename">void</span> main(String[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行<code>groovy HelloWorld2</code>，可以看到采用 Java的语法也能正常运行，只是代码更复杂</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要</p>
<blockquote>
<p>goovyConsole</p>
</blockquote>
<h2 id="Begin">Begin</h2><h3 id="简介">简介</h3><ul>
<li>Groovy 是一门动态语言。</li>
<li>Groov]]>
    </summary>
    
      <category term="groovy" scheme="http://bookislife.com/tags/groovy/"/>
    
      <category term="groovy" scheme="http://bookislife.com/categories/groovy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://bookislife.com/2015/03/29/hello-world/"/>
    <id>http://bookislife.com/2015/03/29/hello-world/</id>
    <published>2015-03-29T08:39:11.000Z</published>
    <updated>2015-03-29T08:39:11.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[second]]></title>
    <link href="http://bookislife.com/2015/03/28/second/"/>
    <id>http://bookislife.com/2015/03/28/second/</id>
    <published>2015-03-28T13:48:05.000Z</published>
    <updated>2015-03-29T08:39:11.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[first]]></title>
    <link href="http://bookislife.com/2015/03/28/first/"/>
    <id>http://bookislife.com/2015/03/28/first/</id>
    <published>2015-03-28T13:47:59.000Z</published>
    <updated>2015-03-28T13:47:59.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="a">a</h1><h2 id="b">b</h2><h2 id="c">c</h2><h3 id="c1">c1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> x = <span class="number">2</span></span><br><span class="line">println <span class="string">"a"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">x</span>:</span><span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">printn x</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="a">a</h1><h2 id="b">b</h2><h2 id="c">c</h2><h3 id="c1">c1</h3><figure class="highlight java"><table><tr><td class="gutt]]>
    </summary>
    
      <category term="game" scheme="http://bookislife.com/tags/game/"/>
    
      <category term="pc" scheme="http://bookislife.com/tags/pc/"/>
    
      <category term="test" scheme="http://bookislife.com/categories/test/"/>
    
  </entry>
  
</feed>